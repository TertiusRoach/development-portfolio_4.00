// Password Context.tsx
//--|ðŸ ‹ This file doesn't ðŸ ‹|--//
import React, { createContext, useContext, useState } from 'react';

//--|ðŸ ‹ Define the context type ðŸ ‹|--//
interface PasswordContextType {
  password: string;
  setPassword: (password: string) => void;
}

//--|ðŸ ‹ Create the context ðŸ ‹|--//
const PasswordContext = createContext<PasswordContextType | undefined>(undefined);

//--|ðŸ ‹ Provider Component ðŸ ‹|--//
export const PasswordProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [password, setPassword] = useState('');

  return <PasswordContext.Provider value={{ password, setPassword }}>{children}</PasswordContext.Provider>;
};

//--|ðŸ ‹ Custom Hook for Accessing Context ðŸ ‹|--//
export const usePassword = () => {
  const context = useContext(PasswordContext);
  if (!context) {
    throw new Error('usePassword must be used within a PasswordProvider');
  }
  return context;
};
