//--|ðŸ ‹ utilities/getScroll.ts ðŸ ‹|--//
export default function getScroll(button: HTMLButtonElement, container: HTMLElement) {
  const setPixels = function (container: HTMLElement): { className: string; scrollAmount: number }[] {
    let children = Array.from(container.children) as HTMLElement[]; //--|ðŸ ˆ Convert the container's children to an array of HTMLElement ðŸ ˆ|--//
    let scrollAmounts: { className: string; scrollAmount: number }[] = []; //--|ðŸ ˆ Initialize an array to store the class names and scroll amounts ðŸ ˆ|--//
    let cumulativeHeight = 0; //--|ðŸ ˆ Initialize cumulative height to 0 ðŸ ˆ|--//
    //--|ðŸ ‹ Iterate over each child element ðŸ ˆ|--//
    children.forEach((child) => {
      //--|ðŸ ‹ Add the class name and cumulative height to the scrollAmounts array ðŸ ˆ|--//
      scrollAmounts.push({
        className: child.className.split('-')[1], //--|ðŸ ˆ Assuming className format includes the section name ðŸ ˆ|--//
        scrollAmount: cumulativeHeight,
      });
      cumulativeHeight += child.offsetHeight; //--|ðŸ ˆ Add the child's height to the cumulative height ðŸ ˆ|--//
    });
    //--|ðŸ ‹ Return the array of class names and scroll amounts ðŸ ˆ|--//
    return scrollAmounts;
  };
  const scrollTag = container.tagName.toLowerCase() as String; //--|ðŸ ˆ Get the tag name of the container in lowercase ðŸ ˆ|--//
  const scrollLabel = button.className.split(' ')[0].split('-')[1] as String; //--|ðŸ ˆ Extract the label name from the button's class name ðŸ ˆ|--//
  const scrollPixels = setPixels(container).find((item) => item.className === scrollLabel); //--|ðŸ ˆ Find the scroll amount for the section corresponding to the label name ðŸ ˆ|--//

  //--|ðŸ ‹ If scrollPixels is found, animate the scroll to the calculated amount ðŸ ‹|--//
  if (scrollPixels) {
    return {
      scrollTag: scrollTag as String,
      scrollTop: scrollPixels.scrollAmount as Number,
    };
  }
}
