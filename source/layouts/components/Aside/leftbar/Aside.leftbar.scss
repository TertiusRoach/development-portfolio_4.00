// Aside.leftbar.scss
// Look out for this note...I don't know if the syntax is correct but I want the <a> element to be the same height as the 1fr height of its grid attribute.

//--|ğŸ ‹| Color Palette |ğŸ ‹|--//
$red-neon: #ff0000; //--ğŸ Š rgba(255, 0, 0, 1) ğŸ ˆ--//
$red-dark: #660000; //--ğŸ Š rgba(102, 0, 0, 1) ğŸ ˆ--//
$red-light: #ea9999; //--ğŸ Š rgba(234, 153, 153, 1) ğŸ ˆ--//

$green-neon: #00ff00; //--ğŸ Š rgba(0, 255, 0, 1) ğŸ ˆ--//
$green-dark: #274e13; //--ğŸ Š rgba(39, 78, 19, 1) ğŸ ˆ--//
$green-light: #b6d7a8; //--ğŸ Š rgba(182, 215, 168, 1) ğŸ ˆ--//

$blue-neon: #3c90ff; //--ğŸ Š rgba(0, 0, 255, 1) ğŸ ˆ--//
$blue-dark: #073763; //--ğŸ Š rgba(127, 17, 224, 1) ğŸ ˆ--//
$blue-light: #9fc5e8; //--ğŸ Š rgba(159, 197, 232, 1) ğŸ ˆ--//

$purple-neon: #9900ff; //--ğŸ Š rgba(153, 0, 255, 1) ğŸ ˆ--//
$purple-dark: #20124d; //--ğŸ Š rgba(32, 18, 77, 1) ğŸ ˆ--//
$purple-light: #b4a7d6; //--ğŸ Š rgba(180, 167, 214, 1) ğŸ ˆ--//

$pink-neon: #ff00ff; //--ğŸ Š rgba(255, 0, 255, 1) ğŸ ˆ--//
$pink-dark: #4c1130; //--ğŸ Š rgba(76, 17, 48, 1) ğŸ ˆ--//
$pink-light: #d5a6bd; //--ğŸ Š rgba(213, 166, 189, 1) ğŸ ˆ--//

$yellow-neon: #ffff00; //--ğŸ Š rgba(255, 255, 0, 1) ğŸ ˆ--//
$yellow-dark: #7f6000; //--ğŸ Š rgba(127, 96, 0, 1) ğŸ ˆ--//
$yellow-light: #ffe599; //--ğŸ Š rgba(255, 229, 153, 1) ğŸ ˆ--//

$orange-neon: #ff9900; //--ğŸ Š rgba(255, 153, 0, 1) ğŸ ˆ--//
$orange-dark: #783f04; //--ğŸ Š rgba(120, 63, 4, 1) ğŸ ˆ--//
$orange-light: #f9cb9c; //--ğŸ Š rgba(249, 203, 156, 1) ğŸ ˆ--//

$brown-neon: #a97142; //--ğŸ Š rgba(169, 113, 66, 1) ğŸ ˆ--//
$brown-dark: #4f341d; //--ğŸ Š rgba(79, 52, 29, 1) ğŸ ˆ--//
$brown-light: #ffd3af; //--ğŸ Š rgba(255, 211, 175, 1) ğŸ ˆ--//

$grey-neon: #bec2cb; //--ğŸ Š rgba(190, 194, 203, 1) ğŸ ˆ--//
$grey-dark: #434343; //--ğŸ Š rgba(67, 67, 67, 1) ğŸ ˆ--//
$grey-light: #efefef; //--ğŸ Š rgba(239, 239, 239, 1) ğŸ ˆ--//

$turquoise-neon: #00ffff; //--ğŸ Š rgba(0, 255, 255, 1) ğŸ ˆ--//
$turquoise-dark: #0c343d; //--ğŸ Š rgba(12, 52, 61, 1) ğŸ ˆ--//
$turquoise-light: #a2c4c9; //--ğŸ Š rgba(162, 196, 201, 1) ğŸ ˆ--//

@mixin desktop-landscape {
  //--|ğŸ Š display: grid; ğŸ ˆ|--//
  grid-template: 4rem 1fr 4rem / 1fr 1fr; //~~|ğŸ Š rows / columns ğŸ ˆ|~~//
  header[class*='foreground'] {
    button {
      width: 100%;
      height: 100%;
    }
    background: rgba($green-neon, 0.75);
    grid-area: 1 / 1 / 2 / 2; //~~|ğŸ Š row-start / col-start / row-end / col-end ğŸ ˆ|~~//
  }
  footer[class*='midground'] {
    grid-area: 3 / 1 / 4 / 2; //~~|ğŸ Š row-start / col-start / row-end / col-end ğŸ ˆ|~~//
    background: rgba($green-neon, 0.25);
  }

  div[class*='background'] {
    display: inherit; //~~|ğŸ ˆ display: grid; ğŸ ˆ|~~//
    grid-template: inherit; //~~|ğŸ ˆ 4rem 1fr 4rem / 1fr 1fr ğŸ ˆ|~~//
    grid-area: 1 / 1 / 4 / 3;
    menu {
      display: inherit; //~~|ğŸ ˆ display: grid; ğŸ ˆ|~~//
      grid-area: 2 / 1 / 3 / 2; //~~|ğŸ ˆ row-start / column-start / row-end / column-end ğŸ ˆ|~~//
      background: rgba(darkgreen, 0.5);
      grid-template: repeat(6, 1fr) / 3rem 1fr 3rem; //~~|ğŸ ˆ rows / columns ğŸ ˆ|~~//
      & {
        // I don't know if the syntax is correct but I want the <a> element to be the same height as the 1fr height of its grid attribute.
        a {
          color: inherit;
          display: inherit; //~~|ğŸ ˆ display: grid; ğŸ ˆ|~~//
          grid-column: 2 / 3; //~~|ğŸ ˆ column-start / column-end ğŸ ˆ|~~//
          text-decoration: none; /* to remove underline */
          grid-template-rows: repeat(3, 1fr);
          h3,
          img {
            display: flex;
            grid-row: 2 / 3; //~~|ğŸ ˆ row-start / row-end ğŸ ˆ|~~//
          }
          h3 {
            padding: 4px; //~~|ğŸ ˆ top & bottom / left & right ğŸ ˆ|~~//
          }
        }
        a:nth-child(1) {
          grid-area: 1 / 2 / 2 / 3; //~~|ğŸ ˆ row-start / column-start / row-end / column-end ğŸ ˆ|~~//
          background: rgba($red-dark, 0.25);
        }
        a:nth-child(2) {
          grid-area: 2 / 2 / 3 / 3; //~~|ğŸ ˆ row-start / column-start / row-end / column-end ğŸ ˆ|~~//
          // grid-row: 2 / 3; //~~|ğŸ ˆ row-start / row-end ğŸ ˆ|~~//
          background: rgba($blue-dark, 0.25);
        }
        a:nth-child(3) {
          grid-area: 3 / 2 / 4 / 3; //~~|ğŸ ˆ row-start / column-start / row-end / column-end ğŸ ˆ|~~//
          // grid-row: 3 / 4; //~~|ğŸ ˆ row-start / row-end ğŸ ˆ|~~//
          background: rgba($purple-dark, 0.25);
        }
        a:nth-child(4) {
          grid-area: 4 / 2 / 5 / 3; //~~|ğŸ ˆ row-start / column-start / row-end / column-end ğŸ ˆ|~~//
          // grid-row: 4 / 5; //~~|ğŸ ˆ row-start / row-end ğŸ ˆ|~~//
          background: rgba($orange-dark, 0.25);
        }
        a:nth-child(5) {
          grid-area: 5 / 2 / 6 / 3; //~~|ğŸ ˆ row-start / column-start / row-end / column-end ğŸ ˆ|~~//
          // grid-row: 5 / 6; //~~|ğŸ ˆ row-start / row-end ğŸ ˆ|~~//
          background: rgba($pink-dark, 0.25);
        }
        a:nth-child(6) {
          grid-area: 6 / 2 / 7 / 3; //~~|ğŸ ˆ row-start / column-start / row-end / column-end ğŸ ˆ|~~//
          // grid-row: 6 / 7; //~~|ğŸ ˆ row-start / row-end ğŸ ˆ|~~//
          background: rgba($turquoise-dark, 0.25);
        }
      }

      .left {
        grid-template-columns: repeat(2, auto) 1fr; //~~|ğŸ Š display: grid; ğŸ ˆ|~~//
        h3,
        img {
          //--|ğŸ Š display: flex; ğŸ ˆ|--//
          justify-content: flex-start;
          &h3 {
            grid-column: 2 / 3; //~~|ğŸ ˆ column-start / column-end ğŸ ˆ|~~//
            //--|ğŸ Š display: flex; ğŸ ˆ|--//
          }
          &img {
            margin-left: 3rem;
            grid-column: 1 / 2; //~~|ğŸ ˆ column-start / column-end ğŸ ˆ|~~//
            //--|ğŸ Š display: flex; ğŸ ˆ|--//
          }
        }
      }
      .right {
        grid-template-columns: 1fr repeat(2, auto); //~~|ğŸ Š display: grid; ğŸ ˆ|~~//
        h3,
        img {
          justify-content: flex-end; //~~|ğŸ Š display: flex; ğŸ ˆ|~~//
          &h3 {
            grid-column: 2 / 3; //~~|ğŸ ˆ column-start / column-end ğŸ ˆ|~~//
            //--|ğŸ Š display: flex; ğŸ ˆ|--//
          }
          &img {
            margin-right: 3rem;
            grid-column: 3 / 4; //~~|ğŸ ˆ column-start / column-end ğŸ ˆ|~~//
            //--|ğŸ Š display: flex; ğŸ ˆ|--//
          }
        }
      }
      .center {
        grid-template-columns: 1fr auto 1fr; //~~|ğŸ Š display: grid; ğŸ ˆ|~~//
        h3,
        img {
          grid-column: 2 / 3; //~~|ğŸ ˆ column-start / column-end ğŸ ˆ|~~//
          align-items: center;
          justify-content: center; //~~|ğŸ Š display: flex; ğŸ ˆ|~~//
        }
      }
    }
    section {
      grid-area: 1 / 2 / 4 / 3;
      background: rgba($green-dark, 0.5);
    }
    /*
    menu {
      display: flex;
      justify-content: flex-start;

      margin: 0;
      padding: 4rem 0;
      grid-area: 2 / 2 / 3 / 3; //~~|ğŸ ˆ row-start / col-start / row-end / col-end ğŸ ˆ|~~//
      background: rgba($green-dark, 0.75) !important;
    }
    section {
      grid-area: 1 / 2 / 2 / 3;
      background: rgba($green-light, 0.75);
    }
    */
  }
}
@mixin mobile-portrait {
  //--|ğŸ Š display: grid; ğŸ ˆ|--//
  grid-template: 6rem 1fr 6rem / 1fr; //~~|ğŸ Š rows / columns ğŸ ˆ|~~//
  header[class*='foreground'] {
    button {
      width: 100%;
      height: 100%;
    }
    grid-area: 1 / 1 / 2 / 2; //~~|ğŸ Š row-start / col-start / row-end / col-end ğŸ ˆ|~~//
    background: rgba($green-neon, 0.75);
  }
  footer[class*='midground'] {
    grid-area: 3 / 1 / 4 / 2; //~~|ğŸ Š row-start / col-start / row-end / col-end ğŸ ˆ|~~//
    background: rgba($green-neon, 0.75);
  }
  div[class*='background'] {
    display: inherit; //~~|ğŸ ˆ display: grid; ğŸ ˆ|~~//
    grid-area: 2 / 1 / 3 / 2;
    grid-template: 1fr / 1fr; //~~|ğŸ Š rows / columns ğŸ ˆ|~~//
    ul {
      z-index: 1;
      background: rgba($green-dark, 0.5);
    }
    article {
      z-index: 0;
      background: rgba($green-light, 0.5);
    }
    ul,
    article {
      margin: 0;
      padding: 0;
      grid-area: 1 / 1 / 2 / 2;
    }
  }
}

aside[id*='leftbar'] {
  display: grid;
  grid-area: 1 / 1 / 4 / 4; //~~|ğŸ Š row-start / col-start / row-end / col-end ğŸ ˆ|~~//
  //--|ğŸ ‹| Index Colors |ğŸ ‹|--//
  @mixin index-colors {
    $primary-dark: #000000; //--ğŸ Š rgba(0,0,0,1) ğŸ ˆ--//
    $primary-medium: #737373; //--ğŸ Š rgba(115,115,115,1) ğŸ ˆ--//
    $primary-light: #ffffff; //--ğŸ Š rgba(255,255,255,1) ğŸ ˆ--//
    // Noir Inspiration: Fuctionality First!
    // https://blog.daisie.com/understanding-film-noirs-reflection-of-post-wwii-social-and-cultural-climate/
  }

  &[class*='collapsed'] {
    transition: clip-path 0.25s;
    clip-path: inset(0% 100% 0% 0%); //~~|ğŸ ˆ top / right / bottom / left ğŸ ˆ|~~//
  }
  &[class*='expanded'] {
    transition: clip-path 0.25s;
    clip-path: inset(0% 0% 0% 0%); //~~|ğŸ ˆ top / right / bottom / left ğŸ ˆ|~~//
  }

  //--|ğŸ ‹ Mobile (Portrait) ğŸ ‹|--//
  @media screen and (orientation: portrait) {
    @include mobile-portrait();
  }
  //--|ğŸ ‹ Desktop (Landscape) ğŸ ‹|--//
  @media screen and (orientation: landscape) {
    @include desktop-landscape();
  }
}
