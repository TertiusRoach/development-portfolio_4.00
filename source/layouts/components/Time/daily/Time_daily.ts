//--|ðŸ Š Time_daily.ts ðŸ ˆ|--//

export function updateDate() {
  /**
   * Updates the text content of the <h1> inside the element with class "daily-time"
   * to display the current date in the format: "Saturday, 1st January 2000".
   * Uses ISO 8601 standard as the internal source of truth.
   */

  const now = new Date(); //--|ðŸ Š Get the current date and time as an ISO 8601 string (UTC-based) ðŸ ˆ|--//
  const isoDate = now.toISOString(); //--|ðŸ Š Not used in output but ensures ISO compliance ðŸ ˆ|--//

  // Extract readable parts of the date
  const day = now.getDate();
  const weekday = now.toLocaleDateString('en-GB', { weekday: 'long' });
  const month = now.toLocaleDateString('en-GB', { month: 'long' });
  const year = now.getFullYear();

  /**
   * Add ordinal suffix to the day (e.g., 1st, 2nd, 3rd, 4th...)
   * Handles English ordinal exceptions (11th, 12th, 13th)
   */
  const suffix =
    day % 10 === 1 && day !== 11
      ? 'st'
      : day % 10 === 2 && day !== 12
      ? 'nd'
      : day % 10 === 3 && day !== 13
      ? 'rd'
      : 'th';

  const formatted = `${weekday}, ${day}${suffix} ${month} ${year}`; //--|ðŸ Š Construct the final formatted date string ðŸ ˆ|--//
  setTimeout(() => {
    const timeElement = document.querySelector('.daily-time h1'); //--|ðŸ Š Select the target <h1> and update its text content ðŸ ˆ|--//
    if (timeElement) {
      timeElement.textContent = formatted;
    }
  }, 1500);
}
/*
export function defineButton(
  button: 'track-day' | 'log-ticket' | 'find-link',
  info: { blockName: string; pageName: string }
) {
  const { blockName, pageName } = info;
  //--|ðŸ ‹ Always Return an Object ðŸ ‹|--//
  switch (button) {
    case 'track-day':
      return {
        fontSize: '<h1>' as
          | '<h1>'
          | '<h2>'
          | '<h3>'
          | '<h4>'
          | '<h5>'
          | '<h6>'
          | '<p>',
        layoutView: 'text' as
          | 'left'
          | 'right'
          | 'center'
          | 'icon'
          | 'text',
        shadingView: 'dark' as 'dark' | 'medium' | 'light',

        className: button,
        blockName: blockName as 'main',
        pageName: 'overtime' as
          | 'landing'
          | 'overtime'
          | 'ticketing'
          | 'hyperlink',
        imageLink: '',
      };
    case 'log-ticket':
      return {
        fontSize: '<h1>' as
          | '<h1>'
          | '<h2>'
          | '<h3>'
          | '<h4>'
          | '<h5>'
          | '<h6>'
          | '<p>',
        layoutView: 'text' as
          | 'left'
          | 'right'
          | 'center'
          | 'icon'
          | 'text',
        shadingView: 'dark' as 'dark' | 'medium' | 'light',

        className: button,
        blockName: blockName as 'main',
        pageName: 'ticketing' as
          | 'landing'
          | 'overtime'
          | 'ticketing'
          | 'hyperlink',
        imageLink: '',
      };
    case 'find-link':
      return {
        fontSize: '<h1>' as
          | '<h1>'
          | '<h2>'
          | '<h3>'
          | '<h4>'
          | '<h5>'
          | '<h6>'
          | '<p>',
        layoutView: 'text' as
          | 'left'
          | 'right'
          | 'center'
          | 'icon'
          | 'text',
        shadingView: 'dark' as 'dark' | 'medium' | 'light',

        className: button,
        blockName: blockName as 'main',
        pageName: 'hyperlink' as
          | 'landing'
          | 'overtime'
          | 'ticketing'
          | 'hyperlink',
        imageLink: '',
      };
  }
}

export function togglePreview(
  pageName: string,
  action: 'highlight' | 'downplay',
  division: 'overtime' | 'ticketing' | 'hyperlink'
) {
  const element = document.querySelector(
    `#${pageName}-header section .preview-${division}`
  ) as HTMLElement;
  switch (action) {
    case 'highlight':
      element.classList.remove('downplay'); //--|ðŸ ˆ Remove '.downplay' ðŸ ˆ|--//
      return element.classList.add('highlight'); //--|ðŸ ˆ Toggle '.highlight' ðŸ ˆ|--//
    case 'downplay':
      element.classList.remove('highlight'); //--|ðŸ ˆ Remove '.highlight' ðŸ ˆ|--//
      return element.classList.add('downplay'); //--|ðŸ ˆ Toggle '.downplay' ðŸ ˆ|--//
  }
}

export function viewDemo(
  pageName: string,
  viewDemo: 'overtime' | 'ticketing' | 'hyperlink'
) {
  const showDemo = (viewDemo: string) => {
    let element = document.querySelector(`#${viewDemo}-body`); //--|ðŸ ˆ Select the new view element using its dynamic ID ðŸ ˆ|--//
    let visible = document.querySelector(
      "div[id*='body'].active"
    ) as HTMLElement | null; //--|ðŸ ˆ Find the 'div[id*='body']' tag with a '.active' class ðŸ ˆ|--//

    if (!(element instanceof HTMLElement)) {
      //--|ðŸ ‰ Safeguard: Ensure the element exists and is an HTMLElement ðŸ ˆ|--//
      console.warn(`Element for view "${viewDemo}" not found.`);
      return;
    }

    if (visible) {
      //--|ðŸ ‰ If there's a visible element, hide it ðŸ ˆ|--//
      visible.classList.add('asleep'); //--|ðŸ ˆ Hide it by adding 'asleep' ðŸ ˆ|--//
      visible.classList.remove('active'); //--|ðŸ ˆ And remove 'active' class ðŸ ˆ|--//
    }

    switch (true) {
      case element.classList.contains('asleep'):
        //--|ðŸ ‰ Show the selected view only if itâ€™s currently hidden ðŸ ˆ|--//
        element.classList.remove('asleep'); //--|ðŸ ˆ Remove '.asleep' ðŸ ˆ|--//
        return element.classList.add('active'); //--|ðŸ ˆ Toggle '.active' ðŸ ˆ|--//
      case element.classList.contains('active'):
        //--|ðŸ ‰ Optional toggle: allow hiding the current element again ðŸ ˆ|--//
        element.classList.remove('active'); //--|ðŸ ˆ Remove '.active' ðŸ ˆ|--//
        return element.classList.add('asleep'); //--|ðŸ ˆ Toggle '.asleep' ðŸ ˆ|--//
    }
  };
  const collapseHeader = (pageName: string) => {
    let header = document.querySelector(
      `#${pageName}-header`
    ) as HTMLElement;
    switch (true) {
      case header.classList.contains('collapsed'):
        header.classList.remove('collapsed'); //--|ðŸ ˆ Remove '.collapsed' ðŸ ˆ|--//
        return header.classList.add('expanded'); //--|ðŸ ˆ Toggle '.expanded' ðŸ ˆ|--//
      case header.classList.contains('expanded'):
        header.classList.remove('expanded'); //--|ðŸ ˆ Remove '.expanded' ðŸ ˆ|--//
        return header.classList.add('collapsed'); //--|ðŸ ˆ Toggle '.collapsed' ðŸ ˆ|--//
    }
  };

  setTimeout(() => {
    showDemo(viewDemo);
  }, 250);
  collapseHeader(pageName);
}
*/
